{
    "version": "1.17",
    "alias": "king",
    "color": "#4449aa",
    "mute": false,
    "solo": false,
    "references": [
        "./crab.nxt"
    ],
    "meta_data": {
        "positions": {
            "/base": [
                -481.8322778064832,
                -404.8036992053844
            ],
            "/grid2": [
                280,
                20
            ],
            "/left/mouth_pincer": [
                0.0,
                0.0
            ],
            "/left_pasted": [
                134.55453536884042,
                496.0849031275429
            ],
            "/limb": [
                -806.7059274389385,
                44.15343945182613
            ],
            "/middle": [
                -40.04341079170109,
                -413.2039626786624
            ],
            "/node": [
                154.12682368323743,
                -114.2572247222127
            ],
            "/rotation_order": [
                -613.5267312209569,
                -577.9239028471064
            ],
            "/set_rotation_order": [
                -331.3603950459178,
                -697.7326249531746
            ],
            "/setup_file": [
                -933.266262423356,
                -404.3239377276612
            ],
            "/stache": [
                398.17103527830375,
                503.602236391896
            ]
        },
        "collapse": {
            "/cleanup": false,
            "/middle/cog": true,
            "/middle/spine": false
        },
        "colors": {
            "./crab.nxt": "#bc422a"
        }
    },
    "nodes": {
        "/": {
            "attrs": {
                "asset_root": {
                    "type": "raw",
                    "value": "/groups/crabby/Assets/Rigging/King Bling/Build"
                },
                "stache_offsets_L": {},
                "stache_offsets_R": {}
            }
        },
        "/base": {
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.069, 0.091, 0.272]"
                },
                "size": {
                    "type": "int",
                    "value": "6"
                }
            }
        },
        "/cleanup/control_shapes": {
            "enabled": true
        },
        "/cleanup/stache_bend": {
            "attrs": {
                "bend_amount": {
                    "type": "int",
                    "value": "75"
                },
                "down_amount": {
                    "type": "int",
                    "value": "15"
                }
            },
            "code": [
                "",
                "left = STAGE.stache_offsets_L",
                "right = STAGE.stache_offsets_R",
                "for index, offset in enumerate(left):",
                "    if index == 0:",
                "        continue",
                "    if index == 1:",
                "        cmds.rotate(0, 0, -${down_amount}, offset, relative=True, forceOrderXYZ=True, objectSpace=True)",
                "    else:",
                "        cmds.rotate(0, 0, ${bend_amount}, offset, relative=True, forceOrderXYZ=True, objectSpace=True)",
                "for index, offset in enumerate(right):",
                "    if index == 0:",
                "        continue",
                "    if index == 1:",
                "        cmds.rotate(0, 0, -${down_amount}, offset, relative=True, forceOrderXYZ=True, objectSpace=True)",
                "    else:",
                "        cmds.rotate(0, 0, ${bend_amount}, offset, relative=True, forceOrderXYZ=True, objectSpace=True)"
            ]
        },
        "/left": {
            "child_order": [
                "arms",
                "legs",
                "eye",
                "mouth_pincer",
                "stache"
            ]
        },
        "/left/arms": {
            "child_order": [
                "pincers"
            ],
            "attrs": {
                "reverse_segments": {
                    "value": "1"
                },
                "socket": {
                    "type": "str",
                    "value": "\"Spine_M_matrixSpline_Segment5_CTL\""
                }
            }
        },
        "/left/arms/pincers": {
            "attrs": {
                "pincer_guides": {
                    "type": "list",
                    "value": "['${part_name}_Pincers', '${part_name}_Pincer']"
                }
            }
        },
        "/left/eye": {
            "child_order": [
                "stalk",
                "eye"
            ],
            "attrs": {
                "parent": {
                    "type": "raw",
                    "value": "Head_M_END_CTL"
                }
            }
        },
        "/left/eye/eye": {
            "attrs": {
                "segments": {
                    "value": "4"
                }
            }
        },
        "/left/eye/stalk": {
            "attrs": {
                "segments": {
                    "type": "int",
                    "value": "8"
                },
                "socket": {
                    "type": "raw",
                    "value": "${parent}"
                }
            }
        },
        "/left/legs/back": {
            "attrs": {
                "chain": {
                    "value": "['Section1', 'Section2', 'Section3', 'Section4', 'Section5', 'Section6', 'END']"
                },
                "socket": {
                    "type": "str",
                    "value": "\"Spine_M_matrixSpline_Segment3_CTL\""
                }
            }
        },
        "/left/legs/front": {
            "attrs": {
                "socket": {
                    "type": "str",
                    "value": "\"Spine_M_matrixSpline_Segment4_CTL\""
                }
            }
        },
        "/left/mouth_pincer": {
            "enabled": false
        },
        "/left/stache": {
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.1"
                },
                "ctl_group": {
                    "type": "raw",
                    "value": "${part_name}_CTLS"
                },
                "guides": {
                    "type": "list",
                    "value": "[\"Main\", \"Section1\", \"Section2\", \"Section3\", \"Section4\", \"Section5\", \"Section6\", \"Section7\", \"Section8\", \"Section9\"]"
                },
                "parent": {
                    "type": "raw",
                    "value": "Head_M_END_CTL"
                },
                "part_def": {
                    "type": "raw",
                    "value": "${part_name}_DEF"
                },
                "part_group": {
                    "type": "raw",
                    "value": "${part_name}_MCH"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Stache_"
                },
                "segments": {
                    "type": "int",
                    "value": "24"
                },
                "socket": {
                    "type": "raw",
                    "value": "${parent}"
                },
                "tweak_attr": {
                    "type": "raw",
                    "value": "${part_name}_ControlPanel.${tweak_attr_long}"
                },
                "tweak_attr_long": {
                    "type": "raw",
                    "value": "tweakVisibility"
                },
                "tweak_attr_nice": {
                    "type": "raw",
                    "value": "Tweak Control Visibility"
                },
                "tweak_group": {
                    "type": "raw",
                    "value": "${part_name}_Tweak_CTLS"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.05"
                }
            },
            "code": [
                "part_group = cmds.group(empty=True, name=\"${part_group}\", parent=\"${parent}\")",
                "def_group = cmds.group(empty=True, name=\"${part_def}\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=part_group)",
                "tweak_group = cmds.group(empty=True, name=\"${tweak_group}\", parent=ctl_group)",
                "cmds.hide(tweak_group)",
                "",
                "cmds.connectAttr(",
                "    \"${control_layer}.controlColor\", ",
                "    f\"{ctl_group}.drawOverride.overrideColorRGB\"",
                ")",
                "cmds.setAttr(f\"{ctl_group}.overrideEnabled\", 1)",
                "cmds.setAttr(f\"{ctl_group}.overrideRGBColors\", 1)",
                "",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=\"${tweak_attr_long}\", ",
                "            niceName=\"${tweak_attr_nice}\", ",
                "            attributeType=\"bool\",",
                "            )",
                "tweak_attr = f\"{control_panel}.${tweak_attr_long}\"",
                "cmds.setAttr(tweak_attr, channelBox=True)   ",
                "",
                "joints = [f\"${prefix}${side}_{joint}\" for joint in self.guides]",
                "self.joints = joints  ",
                "",
                "controls = []",
                "offsets = []",
                "last_control: str",
                "for i, guide in enumerate(joints):",
                "    control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "    )",
                "    controls.append(control.control_transform)",
                "    offsets.append(control.offset_transform)",
                "",
                "    if i == 0:",
                "        impulse.utils.transform.matrix_constraint(\"${socket}\", control.offset_transform, keep_offset=True)",
                "    else:",
                "        if i == 2:",
                "            cmds.connectAttr(\"${tweak_attr}\", f\"{control.offset_transform}.visibility\")",
                "        cmds.parent(control.offset_transform, last_control)",
                "    last_control = control.control_transform",
                "knots = []",
                "for i in range(len(joints)-1):",
                "    if i == 0:",
                "        knots.extend([0,0,0])",
                "    elif i == len(joints)-2:",
                "        knots.extend([i,i,i])",
                "    elif i == 1:",
                "        knots.append(0.5)",
                "    else:",
                "        knots.append(i)",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${part_name}\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    knots=knots,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                "    arc_length=False,",
                ")",
                "",
                "for control in controls:",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_${tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} ${tweak_attr_nice}\", ",
                "        proxy=\"${tweak_attr}\")",
                "        ",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))",
                "STAGE.stache_offsets_${side} = offsets"
            ]
        },
        "/limb/controls": {
            "child_order": [
                "ik"
            ],
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.3"
                }
            }
        },
        "/limb/controls/ik": {},
        "/middle": {
            "child_order": [
                "cog",
                "spine",
                "head",
                "shell"
            ]
        },
        "/middle/head": {
            "enabled": true,
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.8"
                },
                "guides": {
                    "type": "list",
                    "value": "[\"Head_M\", \"Head_M_END\"]"
                },
                "parent": {
                    "type": "raw",
                    "value": "Head_M_CTL"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Head_"
                }
            },
            "code": [
                "part_group = cmds.group(empty=True, name=\"${part_name}_MCH\", parent=\"${mch_group}\")",
                "def_group = cmds.group(empty=True, name=\"${part_name}_DEF\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=\"${parent}\")",
                "",
                "guides = ${guides}",
                "base_guide = guides[0]",
                "name= guides[1]",
                "control = impulse.utils.control.make_control(",
                "            name=name, ",
                "            size=${control_size}, ",
                "            target_transform=base_guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "            offset=1,",
                "    )",
                "head_joint = cmds.duplicate(base_guide, name=f\"{name}_DEF\", parentOnly=True)[0]",
                "cmds.parent(head_joint, def_group)   ",
                "impulse.utils.control.connect_control(control, head_joint)",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/middle/shell": {
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.1"
                },
                "segments": {
                    "value": "5"
                }
            }
        },
        "/middle/spine": {
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.8"
                },
                "guides": {
                    "value": "['Body_M_Section1', 'Body_M_Section2' , 'Head_M']"
                },
                "segments": {
                    "type": "int",
                    "value": "6"
                },
                "tangent_offset": {
                    "type": "float",
                    "value": "0.6"
                },
                "tweak_control_height": {
                    "value": "0.3"
                }
            }
        },
        "/setup_file": {
            "child_order": [
                "load_geo",
                "load_guides",
                "create_groups",
                "def_lists"
            ]
        },
        "/skinning/apply_weights": {
            "enabled": true,
            "code": [
                "impulse.utils.skin.apply_ng_skin_weights(\"${body_weights}\", \"${body_geo}\")",
                "impulse.utils.skin.apply_ng_skin_weights(\"${shell_weights}\", \"${shell_geo}\")",
                "impulse.utils.skin.apply_ng_skin_weights(\"${eye_weights}\", \"${eye_geo}\")"
            ]
        }
    }
}