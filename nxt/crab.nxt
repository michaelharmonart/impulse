{
    "version": "1.17",
    "alias": "crab",
    "color": "#bc422a",
    "mute": false,
    "solo": false,
    "references": [
        "/users/guest/g/graphite/maya-python/impulse/nxt/setup.nxt"
    ],
    "comp_overrides": {
        "/users/guest/g/graphite/maya-python/impulse/nxt/base.nxt": {
            "solo": false
        },
        "/users/guest/g/graphite/maya-python/impulse/nxt/cleanup.nxt": {
            "mute": false,
            "solo": false
        },
        "/users/guest/g/graphite/maya-python/impulse/nxt/setup.nxt": {
            "solo": false,
            "mute": false
        }
    },
    "meta_data": {
        "colors": {
            "$NXT_BUILTINS/WidgetNodes.nxt": "#28549b",
            "/users/guest/g/graphite/maya-python/impulse/nxt/cleanup.nxt": "#2371d0",
            "/users/guest/g/graphite/maya-python/impulse/nxt/setup.nxt": "#49936d",
            "/users/guest/g/graphite/maya-python/impulse/nxt/tools.nxt": "#d0a31a"
        },
        "positions": {
            "/Cleanup": [
                955.239112846677,
                -414.72823618234577
            ],
            "/Controls": [
                659.5433881056839,
                -415.4740604063512
            ],
            "/Left/Legs/Back": [
                0.0,
                0.0
            ],
            "/Left/Legs/Front": [
                0.0,
                0.0
            ],
            "/Leg2": [
                -7.0,
                -461.0
            ],
            "/Legs": [
                66.2052106852218,
                -438.6958204441296
            ],
            "/base": [
                -484.92970825922265,
                -416.6663346502985
            ],
            "/button": [
                -1607.5243713135055,
                -994.7650968060259
            ],
            "/checkbox": [
                -1607.5243713135055,
                -934.7650968060259
            ],
            "/cleanup": [
                1651.5969033128472,
                -423.5425374861169
            ],
            "/constrain": [
                -1121.160508405177,
                -981.7967620797133
            ],
            "/create_control": [
                -1231.169439061695,
                -511.835204413823
            ],
            "/dropDownMenu": [
                -1607.5243713135055,
                -874.7650968060259
            ],
            "/grid": [
                -1057.774901511954,
                -1035.36206367962
            ],
            "/gridLayout": [
                -1607.5243713135055,
                -1054.765096806026
            ],
            "/ik": [
                -163.99694492591232,
                402.286026870311
            ],
            "/itemSelector": [
                -1607.5243713135055,
                -754.7650968060259
            ],
            "/left": [
                387.3259231136189,
                -413.6870371515878
            ],
            "/left/legs/front": [
                0.0,
                0.0
            ],
            "/limb": [
                -854.4977016497701,
                5.8370603441208
            ],
            "/main_window": [
                -982.3084207374891,
                -1761.544218151311
            ],
            "/matrix_constrain": [
                -597.1133077527552,
                -1242.4812298659265
            ],
            "/menuItem": [
                -1607.5243713135055,
                -814.7650968060259
            ],
            "/middle": [
                -37.68354450676074,
                -418.42809935875385
            ],
            "/node/node2": [
                0.0,
                0.0
            ],
            "/node2": [
                -1323.883065502404,
                -933.6414024787582
            ],
            "/panel": [
                -1607.5243713135055,
                -1114.765096806026
            ],
            "/pincers": [
                656.90906614546,
                -332.8669674493572
            ],
            "/right": [
                841.9143803151776,
                -418.196815140162
            ],
            "/setup_file": [
                -934.048596528384,
                -412.92961288297056
            ],
            "/side": [
                -845.5425987520201,
                -117.51608999604343
            ],
            "/skinning": [
                1268.7248631308412,
                -420.6098731031592
            ],
            "/spine": [
                -825.3660779866253,
                229.54740039424746
            ],
            "/tab": [
                -1607.5243713135055,
                -1174.765096806026
            ],
            "/window": [
                -1607.5243713135055,
                -1234.765096806026
            ],
            "/write_controls_file": [
                -859.1504854609635,
                -907.114355287704
            ]
        },
        "collapse": {
            "/Cleanup": true,
            "/Leg2": true,
            "/SetupFile": false,
            "/SetupFile/node": true,
            "/base": false,
            "/cleanup": true,
            "/left": false,
            "/left/arms": false,
            "/left/eye/eye": true,
            "/left/eye/stalk": true,
            "/left/legs": false,
            "/left/legs/back": false,
            "/left/legs/front": false,
            "/limb": false,
            "/main_window/manual_tab/curve/grid/node": true,
            "/main_window/manual_tab/main_panel/grid": false,
            "/main_window/manual_tab/main_panel/node": true,
            "/middle/shell": false,
            "/middle/spine": true,
            "/right": false,
            "/right/arms": false,
            "/setup_file/LoadGuides": false
        }
    },
    "nodes": {
        "/": {
            "attrs": {
                "asset_root": {
                    "type": "raw",
                    "value": "${path::/groups/crabby/Assets/Rigging/Scuttle/Build}"
                },
                "body_joints": {},
                "eye_joints": {},
                "shell_joints": {}
            }
        },
        "/base": {
            "execute_in": "/setup_file",
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.6190000176429749, 0.1729000061750412, 0.09700000286102295]"
                },
                "control_layer": {
                    "type": "raw",
                    "value": "Base_ControlLayer"
                },
                "local_name": {
                    "type": "raw",
                    "value": "LOCAL"
                },
                "root_name": {
                    "type": "raw",
                    "value": "ROOT"
                },
                "size": {
                    "type": "int",
                    "value": "3"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})",
                "",
                "controls = []",
                "root = impulse.utils.control.make_control(",
                "            name=\"${root_name}\", ",
                "            size=${size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=\"${controls_group}\",",
                ")",
                "controls.append(root)",
                "local = impulse.utils.control.make_control(",
                "            name=\"${local_name}\", ",
                "            size=${size}*0.9, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent = root.control_transform,",
                ")",
                "controls.append(local)",
                "",
                "for control in controls:",
                "    control_transform = control.control_transform",
                "    cmds.connectAttr(",
                "                \"${control_layer}.controlColor\", ",
                "                f\"{control_transform}.drawOverride.overrideColorRGB\"",
                "            )",
                "    cmds.setAttr(f\"{control_transform}.overrideEnabled\", 1)",
                "    cmds.setAttr(f\"{control_transform}.overrideRGBColors\", 1)"
            ]
        },
        "/cleanup": {
            "execute_in": "/skinning",
            "attrs": {
                "control_filepath": {
                    "type": "raw",
                    "value": "${asset_root}/controls.json"
                },
                "hide_playback": {
                    "type": "bool",
                    "value": "True"
                },
                "release": {
                    "type": "bool",
                    "value": "False"
                }
            },
            "code": [
                "# Hide Rig Groups",
                "cmds.hide(\"${guides_group}\")",
                "if ${release}:",
                "    cmds.delete(\"${guides_group}\")",
                "cmds.hide(\"${mch_group}\")",
                "cmds.hide(\"${def_group}\")",
                "",
                "# Read and apply control shapes",
                "impulse.utils.control.apply_control_file(filepath=\"${control_filepath}\")",
                "",
                "# Hide Controls on Playback",
                "if ${hide_playback}:",
                "    cmds.setAttr(\"${controls_group}.hideOnPlayback\", 1)",
                "",
                "# Make Geo unselectable",
                "cmds.setAttr(\"${geo_group}.overrideEnabled\", 1)",
                "cmds.setAttr(\"${geo_group}.overrideDisplayType\", 2)",
                ""
            ]
        },
        "/left": {
            "instance": "/side",
            "execute_in": "/middle",
            "child_order": [
                "arms",
                "legs",
                "eye"
            ],
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.105, 0.447, 0.911]"
                },
                "control_layer": {
                    "type": "raw",
                    "value": "${side}_ControlLayer"
                },
                "side": {
                    "type": "raw",
                    "value": "L"
                },
                "side_mult": {
                    "type": "int",
                    "value": "1"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})",
                "",
                "cmds.refresh()"
            ]
        },
        "/left/arms": {
            "instance": "/limb",
            "child_order": [
                "controls",
                "pincers"
            ],
            "attrs": {
                "chain": {
                    "type": "list",
                    "value": "['Section1', 'Section2', 'ClawConnection', 'Claw', 'Pincers']"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Arm_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "2"
                },
                "socket": {
                    "value": "\"Spine_M_matrixSpline_Segment3_CTL\""
                }
            }
        },
        "/left/arms/pincers": {
            "enabled": true,
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.3"
                },
                "parent": {
                    "type": "raw",
                    "value": "${part_name}_Pincers_POSE"
                },
                "pincer_control_size": {
                    "type": "float",
                    "value": "0.2"
                },
                "pincer_guides": {
                    "type": "list",
                    "value": "['${part_name}_Pincers', '${part_name}_Pincer1', '${part_name}_Pincer2']"
                },
                "pincer_offset": {}
            },
            "code": [
                "guides = ${pincer_guides}",
                "",
                "ctls = \"${part_ctls}\"",
                "pincer_group = cmds.group(empty=True, name=\"${part_name}_Pincer_CTLS\", parent=\"${part_ctls}\")",
                "",
                "base_joint: str",
                "base_ctl: str",
                "for index, guide in enumerate(guides):",
                "    joint = cmds.duplicate(guide, name=f\"{guide}_DEF\", parentOnly=True)[0]",
                "    if index == 0:",
                "        cmds.parent(joint, \"${part_def}\")",
                "        base_joint = joint",
                "        control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            target_transform=guide, ",
                "            size=${control_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            offset=0,",
                "            )",
                "        base_ctl = control.control_transform",
                "        cmds.parent(control.offset_transform, pincer_group)",
                "        impulse.utils.transform.matrix_constraint(\"${parent}\", control.offset_transform, keep_offset=True)",
                "",
                "        impulse.utils.control.connect_control(control, joint)",
                "    else:",
                "        if index == 2:",
                "            mirror_group = cmds.group(empty=True, name=f\"{guide}_Mirror\", parent = base_joint)",
                "            cmds.scale(1, 1, -1, mirror_group, absolute=True)",
                "            cmds.parent(joint, mirror_group)",
                "        else:",
                "            cmds.parent(joint, base_joint)",
                "        control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            target_transform=guide, ",
                "            size=${pincer_control_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            offset=0.2,",
                "            )",
                "        cmds.parent(control.offset_transform, base_ctl)",
                "        impulse.utils.control.connect_control(control, joint)",
                "    ",
                ""
            ]
        },
        "/left/eye": {
            "child_order": [
                "stalk",
                "eye"
            ],
            "attrs": {
                "ctl_group": {
                    "type": "raw",
                    "value": "${part_name}_CTLS"
                },
                "parent": {
                    "type": "raw",
                    "value": "Head_M_END_CTL"
                },
                "part_def": {
                    "type": "raw",
                    "value": "${part_name}_DEF"
                },
                "part_group": {
                    "type": "raw",
                    "value": "${part_name}_MCH"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Eye_"
                },
                "stalk": {
                    "type": "list",
                    "value": "['Stalk_BASE','Stalk_MID', 'Eye']"
                },
                "tweak_attr": {
                    "type": "raw",
                    "value": "${part_name}_ControlPanel.${tweak_attr_long}"
                },
                "tweak_attr_long": {
                    "type": "raw",
                    "value": "tweakVisibility"
                },
                "tweak_attr_nice": {
                    "type": "raw",
                    "value": "Tweak Control Visibility"
                },
                "tweak_group": {
                    "type": "raw",
                    "value": "${part_name}_Tweak_CTLS"
                }
            },
            "code": [
                "part_group = cmds.group(empty=True, name=\"${part_group}\", parent=\"${parent}\")",
                "def_group = cmds.group(empty=True, name=\"${part_def}\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=part_group)",
                "tweak_group = cmds.group(empty=True, name=\"${tweak_group}\", parent=ctl_group)",
                "",
                "",
                "cmds.connectAttr(",
                "    \"${control_layer}.controlColor\", ",
                "    f\"{ctl_group}.drawOverride.overrideColorRGB\"",
                ")",
                "cmds.setAttr(f\"{ctl_group}.overrideEnabled\", 1)",
                "cmds.setAttr(f\"{ctl_group}.overrideRGBColors\", 1)",
                "",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=\"${tweak_attr_long}\", ",
                "            niceName=\"${tweak_attr_nice}\", ",
                "            attributeType=\"bool\",",
                "            )",
                "tweak_attr = f\"{control_panel}.${tweak_attr_long}\"",
                "cmds.setAttr(tweak_attr, channelBox=True)   ",
                "",
                "cmds.connectAttr(\"${tweak_attr}\", \"${tweak_group}.visibility\")"
            ]
        },
        "/left/eye/eye": {
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.1"
                },
                "joints": {},
                "main_size": {
                    "type": "float",
                    "value": "0.15"
                },
                "parent": {
                    "type": "raw",
                    "value": "${part_name}_Eye_BASE_CTL"
                },
                "segments": {
                    "type": "int",
                    "value": "3"
                },
                "socket": {
                    "type": "raw",
                    "value": "Spine_M_matrixSpline_Segment4_CTL"
                },
                "stalk": {
                    "type": "list",
                    "value": "['Eye_BASE','Eye_MID', 'END']"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.05"
                }
            },
            "code": [
                "joints = [f\"${prefix}${side}_{joint}\" for joint in self.stalk]",
                "",
                "self.joints = joints  ",
                "part_group = \"${part_group}\"",
                "def_group = \"${part_def}\"",
                "ctl_group = \"${ctl_group}\"",
                "tweak_group = \"${tweak_group}\"",
                "",
                "controls = []",
                "for i, guide in enumerate(joints):",
                "",
                "    if i == 0:",
                "        controls.append(\"${parent}\")",
                "    else:",
                "        control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "        )",
                "        controls.append(control.control_transform)",
                "        cmds.parent(control.offset_transform, controls[0])",
                "",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${part_name}_Eye\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "for i, control in enumerate(controls):",
                "    if i == 0:",
                "        continue",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_${tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} ${tweak_attr_nice}\", ",
                "        proxy=\"${tweak_attr}\")",
                "        ",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))",
                "STAGE.eye_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/left/eye/stalk": {
            "attrs": {
                "attr": {},
                "control_size": {
                    "type": "float",
                    "value": "0.1"
                },
                "joints": {},
                "main_size": {
                    "type": "float",
                    "value": "0.15"
                },
                "segments": {
                    "type": "int",
                    "value": "3"
                },
                "socket": {
                    "type": "raw",
                    "value": "Spine_M_matrixSpline_Segment4_CTL"
                },
                "stalk": {
                    "type": "list",
                    "value": "['Stalk_BASE','Stalk_MID', 'Eye_BASE']"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.05"
                }
            },
            "code": [
                "joints = [f\"${prefix}${side}_{joint}\" for joint in self.stalk]",
                "",
                "self.joints = joints  ",
                "part_group = \"${part_group}\"",
                "def_group = \"${part_def}\"",
                "ctl_group = \"${ctl_group}\"",
                "tweak_group = \"${tweak_group}\"",
                "",
                "",
                "controls = []",
                "for i, guide in enumerate(joints):",
                "    control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "    )",
                "    controls.append(control.control_transform)",
                "    if i == 0:",
                "        impulse.utils.transform.matrix_constraint(\"${socket}\", control.offset_transform, keep_offset=True)",
                "    else:",
                "        cmds.parent(control.offset_transform, controls[0])",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${part_name}_Stalk\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "for control in controls:",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_${tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} ${tweak_attr_nice}\", ",
                "        proxy=\"${tweak_attr}\")",
                "        ",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))",
                "STAGE.eye_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/left/legs": {
            "child_order": [
                "front",
                "back"
            ],
            "enabled": true,
            "attrs": {
                "chain": {
                    "type": "list",
                    "value": "['Section1', 'Section2', 'Section3', 'Section4', 'Section5', 'END']"
                }
            }
        },
        "/left/legs/back": {
            "instance": "/limb",
            "attrs": {
                "prefix": {
                    "type": "raw",
                    "value": "Back_Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "3"
                },
                "socket": {
                    "value": "\"Spine_M_matrixSpline_Segment1_CTL\""
                }
            }
        },
        "/left/legs/front": {
            "instance": "/limb",
            "attrs": {
                "prefix": {
                    "type": "raw",
                    "value": "Front_Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "3"
                },
                "socket": {
                    "type": "str",
                    "value": "\"Spine_M_matrixSpline_Segment2_CTL\""
                }
            }
        },
        "/limb": {
            "child_order": [
                "controls"
            ],
            "attrs": {
                "fk_joints": {},
                "ik_chain_joints": {},
                "ik_joints": {},
                "ik_switch": {},
                "joints": {},
                "part_ctls": {
                    "type": "raw",
                    "value": "${part_name}_CTLS"
                },
                "part_def": {
                    "type": "raw",
                    "value": "${part_name}_DEF"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "pole_vector": {
                    "type": "raw",
                    "value": "${part_name}_PoleVector"
                },
                "pose_joints": {},
                "prefix": {
                    "type": "raw",
                    "value": "Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "0"
                },
                "side": {
                    "type": "raw",
                    "value": "L"
                },
                "socket": {
                    "type": "NoneType",
                    "value": "None"
                }
            },
            "code": [
                "part_group = cmds.group(empty=True, name=\"${part_name}_MCH\", parent=\"${mch_group}\")",
                "cmds.scale(${side_mult}, 1, 1, part_group, absolute=True)",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=f\"IkFkSwitch\", ",
                "            niceName=f\"IK FK Switch\", ",
                "            minValue=0,",
                "            maxValue=1,",
                "            attributeType=\"float\",",
                "            )",
                "cmds.setAttr(f\"{control_panel}.IkFkSwitch\", keyable=True)            ",
                "self.ik_switch = f\"{control_panel}.IkFkSwitch\"",
                "self.joints = [f\"${prefix}${side}_{joint}\" for joint in self.chain]",
                "",
                "solve_joints = impulse.utils.ik.ik_from_guides(",
                "    guides=self.joints, pole_vector_guide=\"${pole_vector}\", ",
                "    name=\"${part_name}_IK\", parent=part_group, reverse_segments=${reverse_segments}",
                ")",
                "",
                "if ${reverse_segments}:",
                "    ik_chain_joints = impulse.utils.ik.fk_from_guides(guides=self.joints, name=\"${part_name}_IkChain\", parent=part_group, suffix=\"_IkChain\")",
                "    impulse.utils.transform.constrain_transforms(solve_joints, ik_chain_joints)",
                "    self.ik_chain_joints = ik_chain_joints",
                "else:",
                "    self.ik_chain_joints = solve_joints",
                "",
                "self.ik_joints = solve_joints    ",
                "self.fk_joints = impulse.utils.ik.fk_from_guides(guides=self.joints, name=\"${part_name}_FK\", parent=part_group)",
                "self.pose_joints = impulse.utils.ik.fk_from_guides(guides=self.joints, name=\"${part_name}_POSE\", parent=part_group, suffix=\"_POSE\")",
                "",
                "impulse.utils.ik.ik_fk_blend_list(self.ik_chain_joints, self.fk_joints, self.pose_joints, self.ik_switch)",
                "",
                "def_joints = impulse.utils.ik.fk_from_guides(guides=self.joints[:-1], name=\"${part_def}\", parent=\"${def_group}\", suffix=\"_DEF\", side_mult=${side_mult})",
                "impulse.utils.transform.constrain_transforms(self.pose_joints[:-1], def_joints)",
                "",
                "STAGE.body_joints.extend(def_joints)"
            ]
        },
        "/limb/controls": {
            "child_order": [
                "fk",
                "ik"
            ],
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.2"
                },
                "part_ctls": {
                    "type": "raw",
                    "value": "${part_name}_CTLS"
                }
            },
            "code": [
                "ctls = cmds.group(empty=True, name=\"${part_ctls}\", parent=\"${controls_parent}\")",
                "cmds.scale(${side_mult}, 1, 1, ctls, absolute=True)",
                "self.part_ctls = ctls",
                "",
                "cmds.connectAttr(",
                "    \"${control_layer}.controlColor\", ",
                "    f\"{ctls}.drawOverride.overrideColorRGB\"",
                ")",
                "cmds.setAttr(f\"{ctls}.overrideEnabled\", 1)",
                "cmds.setAttr(f\"{ctls}.overrideRGBColors\", 1)"
            ]
        },
        "/limb/controls/fk": {
            "code": [
                "controls = []",
                "fk_group = cmds.group(empty=True, name=\"${part_name}_FK_CTLS\", parent=\"${part_ctls}\")",
                "cmds.connectAttr(\"${ik_switch}\", f\"{fk_group}.visibility\")",
                "for index, joint in enumerate(self.fk_joints):",
                "    # Check if the joint has a child and if so, generate a control",
                "    joint_children = cmds.listRelatives(joint, children=True, type=\"joint\") or []",
                "    if len(joint_children) > 0:",
                "        joint_child = joint_children[0]",
                "        y_translate = cmds.getAttr(f\"{joint_child}.translateY\")",
                "    ",
                "        control = impulse.utils.control.make_control(",
                "            name=joint, ",
                "            target_transform=joint, ",
                "            size=${control_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            offset=y_translate/2,",
                "            )",
                "        impulse.utils.control.connect_control(control, joint)",
                "        controls.append(control)",
                "        ",
                "        # Parent to the control group, or the parent control.",
                "        if index > 0:",
                "            cmds.parent(control.offset_transform, controls[index - 1].control_transform)",
                "        else:",
                "            cmds.parent(control.offset_transform, fk_group)",
                "",
                "            socket = ${socket} or fk_group",
                "            socket_group = cmds.group(empty=True, name=f\"{control.name}_Socket\", parent=socket)",
                "            impulse.utils.transform.match_transform(socket_group, control.control_transform)",
                "            cmds.pointConstraint(socket_group, control.offset_transform, maintainOffset=True)",
                "            ",
                "        ",
                "        control_transform = control.control_transform",
                "        cmds.addAttr(",
                "            control_transform,",
                "            longName=\"${part_name}_IkFkSwitch\", ",
                "            niceName=f\"{self.part_name.replace('_', ' ')} IK FK Switch\", ",
                "            proxy=\"${ik_switch}\")"
            ]
        },
        "/limb/controls/ik": {
            "attrs": {
                "pole_vector_size": {
                    "type": "float",
                    "value": "0.05"
                }
            },
            "code": [
                "controls = []",
                "ik_group = cmds.group(empty=True, name=\"${part_name}_IK_CTLS\", parent=\"${part_ctls}\")",
                "ik_joints = self.ik_joints",
                "ik_switch_reverse = cmds.createNode(\"subtract\")",
                "cmds.setAttr(f\"{ik_switch_reverse}.input1\", 1)",
                "cmds.connectAttr(\"${ik_switch}\", f\"{ik_switch_reverse}.input2\")",
                "cmds.connectAttr(f\"{ik_switch_reverse}.output\", f\"{ik_group}.visibility\")",
                "",
                "reversed_joints = ik_joints[::-1]",
                "control_joints = [ik_joints[0]]+reversed_joints[:${reverse_segments}]",
                "pole_vector_parent: str",
                "for index, joint in enumerate(control_joints):",
                "    if index == 1:",
                "        control_shape=impulse.utils.control.ControlShape.CUBE",
                "    else:",
                "        control_shape=impulse.utils.control.ControlShape.CIRCLE",
                "        ",
                "    control = impulse.utils.control.make_control(",
                "        name=joint, ",
                "        target_transform=joint, ",
                "        size=${control_size}, ",
                "        control_shape=control_shape,",
                "        offset=0,",
                "        )",
                "    controls.append(control)",
                "        ",
                "    # Parent to the control group, or the parent control.",
                "    if index > 1:",
                "        cmds.parent(control.offset_transform, controls[index - 1].control_transform)",
                "    else:",
                "        cmds.parent(control.offset_transform, ik_group)",
                "        ",
                "    if index == 0:",
                "        socket = ${socket} or ik_group",
                "        socket_group = cmds.group(empty=True, name=f\"{control.name}_Socket\", parent=socket)",
                "        impulse.utils.transform.match_transform(socket_group, control.control_transform)",
                "        cmds.pointConstraint(socket_group, control.offset_transform, maintainOffset=True)",
                "",
                "    if index == ${reverse_segments}:",
                "        pole_vector_parent = control.control_transform",
                "    control_transform = control.control_transform",
                "    impulse.utils.control.connect_control(control, joint)",
                "",
                "pv_control = impulse.utils.control.make_control(",
                "    name=\"${pole_vector}\", ",
                "    target_transform=\"${pole_vector}\", ",
                "    size=${pole_vector_size}, ",
                "    control_shape=impulse.utils.control.ControlShape.SPHERE,",
                "    offset=0,",
                "    )    ",
                "cmds.parent(pv_control.offset_transform, pole_vector_parent)",
                "impulse.utils.control.connect_control(pv_control, \"${pole_vector}_IN\")            ",
                "for control in controls: ",
                "",
                "    control_transform = control.control_transform       ",
                "    ",
                "    cmds.addAttr(",
                "        control_transform,",
                "        longName=\"${part_name}_IkFkSwitch\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} IK FK Switch\", ",
                "        proxy=\"${ik_switch}\")"
            ]
        },
        "/main_window": {
            "child_order": [
                "manual_tab"
            ]
        },
        "/main_window/manual_tab": {
            "child_order": [
                "selection_panel",
                "main_panel",
                "curve"
            ]
        },
        "/main_window/manual_tab/curve": {
            "child_order": [
                "grid",
                "create_control"
            ]
        },
        "/main_window/manual_tab/curve/grid": {
            "child_order": [
                "combine_curve",
                "write_curve",
                "size_selector",
                "control_selector"
            ]
        },
        "/main_window/manual_tab/curve/grid/control_selector": {},
        "/middle": {
            "instance": "/side",
            "execute_in": "/base",
            "child_order": [
                "cog",
                "spine",
                "shell"
            ],
            "attrs": {
                "cog_guide": {
                    "type": "raw",
                    "value": "COG"
                },
                "control_color": {
                    "type": "list",
                    "value": "[0.149, 0.760, 0.360]"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})"
            ]
        },
        "/middle/cog": {
            "attrs": {
                "size": {
                    "type": "int",
                    "value": "1"
                }
            },
            "code": [
                "controls = []",
                "cog = impulse.utils.control.make_control(",
                "            name=\"${cog_guide}\", ",
                "            size=${size}, ",
                "            target_transform=\"${cog_guide}\",",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=\"${controls_parent}\",",
                ")",
                "controls.append(cog)",
                "",
                "for control in controls:",
                "    control_transform = control.control_transform",
                "    cmds.connectAttr(",
                "                \"${control_layer}.controlColor\", ",
                "                f\"{control_transform}.drawOverride.overrideColorRGB\"",
                "            )",
                "    cmds.setAttr(f\"{control_transform}.overrideEnabled\", 1)",
                "    cmds.setAttr(f\"{control_transform}.overrideRGBColors\", 1)"
            ]
        },
        "/middle/shell": {
            "enabled": true,
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.07"
                },
                "guide_prefix": {
                    "type": "raw",
                    "value": "${part_name}_Squash"
                },
                "guides": {
                    "type": "list",
                    "value": "['${guide_prefix}_BEGIN', '${guide_prefix}_MID', '${guide_prefix}_END']"
                },
                "main_control": {
                    "type": "raw",
                    "value": "${part_name}_Main"
                },
                "main_size": {
                    "type": "float",
                    "value": "0.8"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Shell_"
                },
                "segments": {
                    "type": "int",
                    "value": "3"
                },
                "spline_name": {
                    "type": "raw",
                    "value": "${part_name}_Squash"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.8"
                }
            },
            "code": [
                "shell_main = impulse.utils.control.make_control(",
                "            name=\"${main_control}\", ",
                "            target_transform=\"${main_control}\",",
                "            size=${main_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=\"${cog_guide}_CTL\",",
                "            offset=2,",
                ")",
                "",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "tweak_attr_long = \"tweakVisibility\"",
                "tweak_attr_nice = \"Tweak Control Visibility\"",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=tweak_attr_long, ",
                "            niceName=tweak_attr_nice, ",
                "            attributeType=\"bool\",",
                "            )",
                "tweak_attr = f\"{control_panel}.{tweak_attr_long}\"",
                "cmds.setAttr(tweak_attr, channelBox=True)            ",
                "",
                "part_group = cmds.group(empty=True, name=\"${spline_name}\", parent=shell_main.control_transform)",
                "def_group = cmds.group(empty=True, name=\"${part_name}_DEF\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=part_group)",
                "tweak_group = cmds.group(empty=True, name=\"${part_name}_Tweak_CTLS\", parent=part_group)",
                "guides = ${guides} ",
                "controls = []",
                "for i, guide in enumerate(guides):",
                "    control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.SPHERE,",
                "            parent=ctl_group,  ",
                "    )",
                "    controls.append(control.control_transform)",
                "    impulse.utils.control.draw_on_top(control)",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${spline_name}\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=0.1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "cmds.connectAttr(tweak_attr, f\"{tweak_group}.visibility\") ",
                "",
                "controls.append(shell_main.control_transform)",
                "",
                "for control in controls:",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_{tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} {tweak_attr_nice}\", ",
                "        proxy=f\"{control_panel}.{tweak_attr_long}\")",
                "        ",
                "STAGE.shell_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/middle/spine": {
            "enabled": true,
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.5"
                },
                "guides": {
                    "type": "list",
                    "value": "['Body_M_Section1', 'Body_M_Section2' , 'Head_M_END']"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Spine_"
                },
                "segments": {
                    "type": "int",
                    "value": "4"
                },
                "tangent_offset": {
                    "type": "float",
                    "value": "0.2"
                }
            },
            "code": [
                "from impulse.utils.spline import MatrixSpline, pin_to_matrix_spline",
                "part_group = cmds.group(empty=True, name=\"${part_name}\", parent=\"${cog_guide}_CTL\")",
                "def_group = cmds.group(empty=True, name=\"${part_name}_DEF\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=part_group)",
                "tweak_group = cmds.group(empty=True, name=\"${part_name}_Tweak_CTLS\", parent=ctl_group)",
                "sub_cvs_group = cmds.group(empty=True, name=\"${part_name}_SubCVS\", parent=part_group)",
                "",
                "",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "tweak_attr_long = \"tweakVisibility\"",
                "tweak_attr_nice = \"Tweak Control Visibility\"",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=tweak_attr_long, ",
                "            niceName=tweak_attr_nice, ",
                "            attributeType=\"bool\",",
                "            )",
                "tweak_attr = f\"{control_panel}.{tweak_attr_long}\"",
                "cmds.setAttr(tweak_attr, channelBox=True)      ",
                "cmds.connectAttr(tweak_attr, f\"{tweak_group}.visibility\") ",
                "",
                "controls = []",
                "sub_cvs = []",
                "",
                "guides = ${guides} ",
                "if len(guides) != 3:",
                "    raise RuntimeError(f\"${part_name} has {len(guides)} guides, it needs 3!\")",
                "    ",
                "for i, guide in enumerate(guides):",
                "    guide_len = len(guides)",
                "    if i== 0:",
                "        offset = ${tangent_offset}",
                "    if i == 2:",
                "        offset = -${tangent_offset}",
                "        ",
                "    control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "    )",
                "    ",
                "    cmds.addAttr(",
                "        control.control_transform,",
                "        longName=f\"Shell_M_{tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} {tweak_attr_nice}\", ",
                "        proxy=f\"{control_panel}.{tweak_attr_long}\")",
                "    ",
                "    if i == 0:",
                "        tangent = cmds.group(empty=True, parent=control.control_transform, name=f\"{guide}_Tangent\")",
                "        cmds.move(0, offset, 0, tangent, localSpace=True)",
                "        base_control = control",
                "        controls.append(control.control_transform)",
                "        controls.append(tangent)",
                "        ",
                "        sub_cv = cmds.group(empty=True, parent=control.control_transform, name=f\"{guide}_SubCV\")",
                "        sub_cvs.append(sub_cv)",
                "    if i == 1:",
                "        controls.append(control.control_transform)",
                "        mid_control = control",
                "        sub_cv = cmds.group(empty=True, parent=sub_cvs[0], name=f\"{guide}_SubCV\")",
                "        impulse.utils.transform.match_transform(sub_cv, control.control_transform)",
                "        sub_cvs.append(sub_cv)",
                "    if i == 2:  ",
                "        spline_end = cmds.group(empty=True, parent=ctl_group, name=f\"{guide}_SplineEND\")",
                "        impulse.utils.transform.match_transform(spline_end, control.control_transform) ",
                "        impulse.utils.transform.match_transform(control.offset_transform, mid_control.control_transform) ",
                "        impulse.utils.transform.match_transform(control.control_transform, spline_end)",
                "        cmds.makeIdentity(control.control_transform, apply=True)",
                "        cmds.xform(control.control_transform, pivots=(0, 0, 0)) ",
                "        impulse.utils.transform.matrix_constraint(control.control_transform, spline_end, keep_offset=True)",
                "        cmds.parent(control.offset_transform, base_control.control_transform)",
                "        tangent = cmds.group(empty=True, parent=spline_end, name=f\"{guide}_Tangent\")",
                "        cmds.move(0, offset, 0, tangent, localSpace=True)",
                "        controls.append(tangent)",
                "        controls.append(spline_end)",
                "        ",
                "        sub_cv = cmds.group(empty=True, parent=spline_end, name=f\"{guide}_SubCV\")",
                "        sub_cvs.append(sub_cv)",
                "",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${part_name}\",",
                "    transforms=controls, ",
                "    degree=3,",
                "    segments=${segments}, ",
                "    padded=False,",
                "    control_size=${control_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=0.1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "transforms = sub_cvs",
                "cv_positions: list[str] = []",
                "for transform in transforms:",
                "    position = cmds.xform(transform, query=True, worldSpace=True, translation=True)",
                "    cv_positions.append(impulse.structs.transform.Vector3(*position))",
                "",
                "# Create CV Transforms",
                "cv_transforms: list[str] = []",
                "for i, transform in enumerate(transforms):",
                "    cv_transform: str = cmds.group(name=f\"${part_name}_SubCV{i}\", empty=True)",
                "    impulse.utils.transform.matrix_constraint(transform, cv_transform, keep_offset=False)",
                "    cv_transforms.append(cv_transform)",
                "    cmds.parent(cv_transform, sub_cvs_group)",
                "",
                "matrix_spline: MatrixSpline = MatrixSpline(cv_transforms=cv_transforms, degree=2)",
                "matrix_spline.name = \"${part_name}\"",
                "",
                "pinned_transform: str = cmds.group(empty=True, name=f\"{guides[1]}_Pin\", parent=sub_cvs_group)",
                "pin_to_matrix_spline(",
                "    matrix_spline=matrix_spline,",
                "    pinned_transform=pinned_transform,",
                "    parameter=0.5,",
                "    stretch=False,",
                ")",
                "",
                "impulse.utils.transform.matrix_constraint(pinned_transform, mid_control.offset_transform, keep_offset=True)",
                "",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/right": {
            "instance": "/left",
            "execute_in": "/left",
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.811, 0.080, 0.108]"
                },
                "side": {
                    "value": "R"
                },
                "side_mult": {
                    "value": "-1"
                }
            }
        },
        "/setup_file": {
            "start_point": true,
            "child_order": [
                "load_geo",
                "load_guides",
                "create_groups",
                "def_lists"
            ],
            "attrs": {
                "asset_root": {
                    "value": "/groups/crabby/Assets/Rigging/Scuttle/Build"
                }
            }
        },
        "/setup_file/def_lists": {
            "code": [
                "STAGE.body_joints = []",
                "STAGE.shell_joints = []",
                "STAGE.eye_joints = []"
            ]
        },
        "/side": {
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.105, 0.247, 0.411]"
                },
                "control_layer": {
                    "type": "raw",
                    "value": "${side}_ControlLayer"
                },
                "side": {
                    "type": "raw",
                    "value": "M"
                },
                "side_mult": {
                    "type": "int",
                    "value": "1"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})",
                "",
                "cmds.refresh()"
            ]
        },
        "/skinning": {
            "execute_in": "/right",
            "child_order": [
                "bind_skin"
            ],
            "attrs": {
                "body_geo": {
                    "type": "raw",
                    "value": "Body_GEO"
                },
                "eye_geo": {
                    "type": "raw",
                    "value": "Eyes_GEO"
                },
                "shell_geo": {
                    "type": "raw",
                    "value": "Shell_GEO"
                }
            }
        },
        "/skinning/bind_skin": {
            "attrs": {
                "dual_quaternion": {
                    "type": "bool",
                    "value": "True"
                }
            },
            "code": [
                "impulse.utils.skin.skin_mesh(STAGE.body_joints, \"${body_geo}\", dual_quaternion=${dual_quaternion})",
                "impulse.utils.skin.skin_mesh(STAGE.shell_joints, \"${shell_geo}\", dual_quaternion=${dual_quaternion})",
                "impulse.utils.skin.skin_mesh(STAGE.eye_joints, \"${eye_geo}\", dual_quaternion=${dual_quaternion})"
            ]
        }
    }
}