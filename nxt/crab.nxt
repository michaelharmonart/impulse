{
    "version": "1.17",
    "alias": "crab",
    "color": "#bc422a",
    "mute": false,
    "solo": false,
    "references": [
        "./components.nxt",
        "./setup.nxt"
    ],
    "comp_overrides": {
        "./base.nxt": {
            "solo": false
        },
        "./cleanup.nxt": {
            "mute": false,
            "solo": false
        },
        "./setup.nxt": {
            "solo": false,
            "mute": false
        }
    },
    "meta_data": {
        "colors": {},
        "positions": {
            "/Cleanup": [
                955.239112846677,
                -414.72823618234577
            ],
            "/Controls": [
                659.5433881056839,
                -415.4740604063512
            ],
            "/Left/Legs/Back": [
                0.0,
                0.0
            ],
            "/Left/Legs/Front": [
                0.0,
                0.0
            ],
            "/Leg2": [
                -7.0,
                -461.0
            ],
            "/Legs": [
                66.2052106852218,
                -438.6958204441296
            ],
            "/apply_weights": [
                1450.0116307929213,
                -213.81406421755742
            ],
            "/base": [
                -476.63510246925495,
                -416.1133609309674
            ],
            "/button": [
                -1607.5243713135055,
                -994.7650968060259
            ],
            "/checkbox": [
                -1607.5243713135055,
                -934.7650968060259
            ],
            "/cleanup": [
                1651.5969033128474,
                -422.1620050380221
            ],
            "/constrain": [
                -1121.160508405177,
                -981.7967620797133
            ],
            "/create_control": [
                -1231.169439061695,
                -511.835204413823
            ],
            "/dropDownMenu": [
                -1607.5243713135055,
                -874.7650968060259
            ],
            "/grid": [
                -1057.774901511954,
                -1035.36206367962
            ],
            "/gridLayout": [
                -1607.5243713135055,
                -1054.765096806026
            ],
            "/ik": [
                -163.99694492591232,
                402.286026870311
            ],
            "/itemSelector": [
                -1607.5243713135055,
                -754.7650968060259
            ],
            "/left": [
                387.3259231136189,
                -413.6870371515878
            ],
            "/left/legs/front": [
                0.0,
                0.0
            ],
            "/main_window": [
                -982.3084207374891,
                -1761.544218151311
            ],
            "/matrix_constrain": [
                -597.1133077527552,
                -1242.4812298659265
            ],
            "/menuItem": [
                -1607.5243713135055,
                -814.7650968060259
            ],
            "/middle": [
                -37.68354450676074,
                -418.42809935875385
            ],
            "/node/node2": [
                0.0,
                0.0
            ],
            "/node2": [
                -1323.883065502404,
                -933.6414024787582
            ],
            "/panel": [
                -1607.5243713135055,
                -1114.765096806026
            ],
            "/pincers": [
                656.90906614546,
                -332.8669674493572
            ],
            "/right": [
                841.9143803151776,
                -418.196815140162
            ],
            "/setup_file": [
                -934.048596528384,
                -412.92961288297056
            ],
            "/skinning": [
                1268.7248631308412,
                -420.6098731031592
            ],
            "/spine": [
                -825.3660779866253,
                229.54740039424746
            ],
            "/tab": [
                -1607.5243713135055,
                -1174.765096806026
            ],
            "/texture_switch": [
                -286.57486379033287,
                -288.0904729950696
            ],
            "/texture_to_face_color": [
                -549.0283153217507,
                -682.6244059280805
            ],
            "/window": [
                -1607.5243713135055,
                -1234.765096806026
            ],
            "/write_controls_file": [
                -859.1504854609635,
                -907.114355287704
            ]
        },
        "collapse": {
            "/Cleanup": true,
            "/Leg2": true,
            "/SetupFile": false,
            "/SetupFile/node": true,
            "/base": false,
            "/cleanup": false,
            "/left": false,
            "/left/arms": false,
            "/left/arms/controls": false,
            "/left/eye/eye": true,
            "/left/eye/stalk": true,
            "/left/legs": false,
            "/left/legs/back": false,
            "/left/legs/front": false,
            "/left/mouth_pincer": true,
            "/main_window/manual_tab/Geometry/grid/node": true,
            "/main_window/manual_tab/curve/grid/node": true,
            "/main_window/manual_tab/main_panel/grid": false,
            "/main_window/manual_tab/main_panel/grid/set_rotation_order": true,
            "/main_window/manual_tab/main_panel/node": true,
            "/main_window/manual_tab/node": true,
            "/middle/shell": false,
            "/right": false,
            "/right/arms": false,
            "/setup_file/LoadGuides": false
        }
    },
    "nodes": {
        "/": {
            "attrs": {
                "apply_bend_joints": {
                    "type": "bool",
                    "value": "False"
                },
                "asset_root": {
                    "type": "raw",
                    "value": "/groups/crabby/Assets/Rigging/Scuttle/Build"
                },
                "body_joints": {},
                "eye_joints": {},
                "limb_joints": {},
                "shell_joints": {}
            }
        },
        "/base": {
            "execute_in": "/setup_file",
            "child_order": [
                "control_panel"
            ],
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.6190000176429749, 0.1729000061750412, 0.09700000286102295]"
                },
                "control_layer": {
                    "type": "raw",
                    "value": "Base_ControlLayer"
                },
                "local_name": {
                    "type": "raw",
                    "value": "LOCAL"
                },
                "root_name": {
                    "type": "raw",
                    "value": "ROOT"
                },
                "size": {
                    "type": "int",
                    "value": "3"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})",
                "",
                "controls = []",
                "root = impulse.utils.control.make_control(",
                "            name=\"${root_name}\", ",
                "            size=${size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=\"${controls_group}\",",
                ")",
                "controls.append(root)",
                "local = impulse.utils.control.make_control(",
                "            name=\"${local_name}\", ",
                "            size=${size}*0.9, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent = root.control_transform,",
                ")",
                "controls.append(local)",
                "",
                "for control in controls:",
                "    control_transform = control.control_transform",
                "    cmds.connectAttr(",
                "                \"${control_layer}.controlColor\", ",
                "                f\"{control_transform}.drawOverride.overrideColorRGB\"",
                "            )",
                "    cmds.setAttr(f\"{control_transform}.overrideEnabled\", 1)",
                "    cmds.setAttr(f\"{control_transform}.overrideRGBColors\", 1)"
            ]
        },
        "/base/control_panel": {
            "child_order": [
                "texture_switch"
            ],
            "attrs": {
                "control_panel": {
                    "type": "raw",
                    "value": "Base_ControlPanel"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_panel}\")",
                ""
            ]
        },
        "/base/control_panel/texture_switch": {
            "attrs": {
                "geo_list": {
                    "type": "list",
                    "value": "[\"Shell_GEO\", \"Body_GEO\"]"
                }
            },
            "code": [
                "control_panel = \"${control_panel}\"",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=f\"textureSwitch\", ",
                "            niceName=f\"Texture Switch\", ",
                "            attributeType=\"bool\",",
                ")",
                "switch_attr = f\"{control_panel}.textureSwitch\"",
                "cmds.setAttr(switch_attr, channelBox=True)",
                "",
                "texture_switch_reverse = cmds.createNode(\"subtract\", name=\"TextureSwitch_Reverse\")",
                "cmds.setAttr(f\"{texture_switch_reverse}.input1\", 1)",
                "cmds.connectAttr(switch_attr, f\"{texture_switch_reverse}.input2\")",
                "reverse_switch_attr = f\"{texture_switch_reverse}.output\"",
                "",
                "for control in [\"ROOT_CTL\", \"LOCAL_CTL\"]:",
                "    cmds.addAttr(",
                "        control,",
                "        longName=\"textureSwitch\", ",
                "        niceName=\"Texture Switch\", ",
                "        proxy=switch_attr)",
                "    cmds.setAttr(f\"{control}.textureSwitch\", channelBox=True)",
                "",
                "shapes = []",
                "for geo in ${geo_list}:",
                "    shapes.extend(impulse.utils.transform.get_shapes(geo))",
                "    ",
                "for shape in shapes:",
                "    cmds.connectAttr(reverse_switch_attr, f\"{shape}.displayColors\")"
            ]
        },
        "/cleanup": {
            "execute_in": "/skinning",
            "child_order": [
                "control_shapes"
            ],
            "attrs": {
                "hide_playback": {
                    "type": "bool",
                    "value": "True"
                },
                "release": {
                    "type": "bool",
                    "value": "True"
                }
            },
            "code": [
                "# Hide Rig Groups",
                "cmds.hide(\"${guides_group}\")",
                "if ${release}:",
                "    cmds.delete(\"${guides_group}\")",
                "cmds.hide(\"${mch_group}\")",
                "cmds.hide(\"${def_group}\")",
                "",
                "",
                "# Hide Controls on Playback",
                "if ${hide_playback}:",
                "    cmds.setAttr(\"${controls_group}.hideOnPlayback\", 1)",
                "",
                "# Make Geo unselectable",
                "if ${release}:",
                "    cmds.setAttr(\"${geo_group}.overrideEnabled\", 1)",
                "    cmds.setAttr(\"${geo_group}.overrideDisplayType\", 2)"
            ]
        },
        "/cleanup/control_shapes": {
            "attrs": {
                "control_filepath": {
                    "type": "raw",
                    "value": "${asset_root}/controls.json"
                }
            },
            "code": [
                "import os",
                "# Read and apply control shapes",
                "filepath = \"${control_filepath}\"",
                "if os.path.isfile(filepath):",
                "    impulse.utils.control.apply_control_file(filepath=filepath)",
                "else:",
                "    print(f\"No controls file found at {filepath}, control shapes not applied.\")",
                ""
            ]
        },
        "/left": {
            "instance": "/side",
            "execute_in": "/middle",
            "child_order": [
                "arms",
                "legs",
                "eye",
                "mouth_pincer"
            ],
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.105, 0.447, 0.911]"
                },
                "control_layer": {
                    "type": "raw",
                    "value": "${side}_ControlLayer"
                },
                "side": {
                    "type": "raw",
                    "value": "L"
                },
                "side_mult": {
                    "type": "int",
                    "value": "1"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})",
                "",
                "cmds.refresh()"
            ]
        },
        "/left/arms": {
            "instance": "/limb",
            "child_order": [
                "controls",
                "pincers"
            ],
            "attrs": {
                "chain": {
                    "type": "list",
                    "value": "['Section1', 'Section2', 'ClawConnection', 'Claw', 'Pincers']"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Arm_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "2"
                },
                "socket": {
                    "value": "\"Spine_M_matrixSpline_Segment3_CTL\""
                }
            }
        },
        "/left/arms/pincers": {
            "enabled": true,
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.3"
                },
                "parent": {
                    "type": "raw",
                    "value": "${part_name}_Pincers_POSE"
                },
                "pincer_control_size": {
                    "type": "float",
                    "value": "0.2"
                },
                "pincer_guides": {
                    "type": "list",
                    "value": "['${part_name}_Pincers', '${part_name}_Pincer1', '${part_name}_Pincer2']"
                },
                "pincer_offset": {}
            },
            "code": [
                "guides = ${pincer_guides}",
                "",
                "ctls = \"${part_ctls}\"",
                "pincer_group = cmds.group(empty=True, name=\"${part_name}_Pincer_CTLS\", parent=\"${part_ctls}\")",
                "",
                "base_joint: str",
                "base_ctl: str",
                "joints = []",
                "for index, guide in enumerate(guides):",
                "    joint = cmds.duplicate(guide, name=f\"{guide}_DEF\", parentOnly=True)[0]",
                "    joints.append(joint)",
                "    if index == 0:",
                "        cmds.parent(joint, \"${part_def}\")",
                "        base_joint = joint",
                "        control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            target_transform=guide, ",
                "            size=${control_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            offset=0,",
                "            )",
                "        base_ctl = control.control_transform",
                "        cmds.parent(control.offset_transform, pincer_group)",
                "        impulse.utils.transform.matrix_constraint(\"${parent}\", control.offset_transform, keep_offset=True)",
                "",
                "        impulse.utils.control.connect_control(control, joint)",
                "    else:",
                "        if index == 2:",
                "            mirror_group = cmds.group(empty=True, name=f\"{guide}_Mirror\", parent = base_joint)",
                "            cmds.scale(1, 1, -1, mirror_group, absolute=True)",
                "            cmds.parent(joint, mirror_group)",
                "        else:",
                "            cmds.parent(joint, base_joint)",
                "        control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            target_transform=guide, ",
                "            size=${pincer_control_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            offset=0.2,",
                "            )",
                "        cmds.parent(control.offset_transform, base_ctl)",
                "        impulse.utils.control.connect_control(control, joint)",
                "    ",
                "STAGE.body_joints.extend(joints)"
            ]
        },
        "/left/eye": {
            "child_order": [
                "stalk",
                "eye"
            ],
            "attrs": {
                "ctl_group": {
                    "type": "raw",
                    "value": "${part_name}_CTLS"
                },
                "parent": {
                    "type": "raw",
                    "value": "Head_M_END_CTL"
                },
                "part_def": {
                    "type": "raw",
                    "value": "${part_name}_DEF"
                },
                "part_group": {
                    "type": "raw",
                    "value": "${part_name}_MCH"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Eye_"
                },
                "stalk": {
                    "type": "list",
                    "value": "['Stalk_BASE','Stalk_MID', 'Eye']"
                },
                "tweak_attr": {
                    "type": "raw",
                    "value": "${part_name}_ControlPanel.${tweak_attr_long}"
                },
                "tweak_attr_long": {
                    "type": "raw",
                    "value": "tweakVisibility"
                },
                "tweak_attr_nice": {
                    "type": "raw",
                    "value": "Tweak Control Visibility"
                },
                "tweak_group": {
                    "type": "raw",
                    "value": "${part_name}_Tweak_CTLS"
                }
            },
            "code": [
                "part_group = cmds.group(empty=True, name=\"${part_group}\", parent=\"${parent}\")",
                "def_group = cmds.group(empty=True, name=\"${part_def}\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=part_group)",
                "tweak_group = cmds.group(empty=True, name=\"${tweak_group}\", parent=ctl_group)",
                "",
                "",
                "cmds.connectAttr(",
                "    \"${control_layer}.controlColor\", ",
                "    f\"{ctl_group}.drawOverride.overrideColorRGB\"",
                ")",
                "cmds.setAttr(f\"{ctl_group}.overrideEnabled\", 1)",
                "cmds.setAttr(f\"{ctl_group}.overrideRGBColors\", 1)",
                "",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=\"${tweak_attr_long}\", ",
                "            niceName=\"${tweak_attr_nice}\", ",
                "            attributeType=\"bool\",",
                "            )",
                "tweak_attr = f\"{control_panel}.${tweak_attr_long}\"",
                "cmds.setAttr(tweak_attr, channelBox=True)   ",
                "",
                "cmds.connectAttr(\"${tweak_attr}\", \"${tweak_group}.visibility\")"
            ]
        },
        "/left/eye/eye": {
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.1"
                },
                "joints": {},
                "main_size": {
                    "type": "float",
                    "value": "0.15"
                },
                "parent": {
                    "type": "raw",
                    "value": "${part_name}_Eye_BASE_CTL"
                },
                "segments": {
                    "type": "int",
                    "value": "3"
                },
                "stalk": {
                    "type": "list",
                    "value": "['Eye_BASE','Eye_MID', 'END']"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.05"
                }
            },
            "code": [
                "joints = [f\"${prefix}${side}_{joint}\" for joint in self.stalk]",
                "",
                "self.joints = joints  ",
                "part_group = \"${part_group}\"",
                "def_group = \"${part_def}\"",
                "ctl_group = \"${ctl_group}\"",
                "tweak_group = \"${tweak_group}\"",
                "",
                "controls = []",
                "for i, guide in enumerate(joints):",
                "",
                "    if i == 0:",
                "        controls.append(\"${parent}\")",
                "    else:",
                "        control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "        )",
                "        controls.append(control.control_transform)",
                "        cmds.parent(control.offset_transform, controls[0])",
                "",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${part_name}_Eye\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "for i, control in enumerate(controls):",
                "    if i == 0:",
                "        continue",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_${tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} ${tweak_attr_nice}\", ",
                "        proxy=\"${tweak_attr}\")",
                "        ",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))",
                "STAGE.eye_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/left/eye/stalk": {
            "attrs": {
                "attr": {},
                "control_size": {
                    "type": "float",
                    "value": "0.1"
                },
                "joints": {},
                "main_size": {
                    "type": "float",
                    "value": "0.15"
                },
                "segments": {
                    "type": "int",
                    "value": "3"
                },
                "socket": {
                    "type": "raw",
                    "value": "Spine_M_matrixSpline_Segment4_CTL"
                },
                "stalk": {
                    "type": "list",
                    "value": "['Stalk_BASE','Stalk_MID', 'Eye_BASE']"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.05"
                }
            },
            "code": [
                "joints = [f\"${prefix}${side}_{joint}\" for joint in self.stalk]",
                "",
                "self.joints = joints  ",
                "part_group = \"${part_group}\"",
                "def_group = \"${part_def}\"",
                "ctl_group = \"${ctl_group}\"",
                "tweak_group = \"${tweak_group}\"",
                "",
                "",
                "controls = []",
                "for i, guide in enumerate(joints):",
                "    control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "    )",
                "    controls.append(control.control_transform)",
                "    if i == 0:",
                "        impulse.utils.transform.matrix_constraint(\"${socket}\", control.offset_transform, keep_offset=True)",
                "    else:",
                "        cmds.parent(control.offset_transform, controls[0])",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${part_name}_Stalk\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "for control in controls:",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_${tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} ${tweak_attr_nice}\", ",
                "        proxy=\"${tweak_attr}\")",
                "        ",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))",
                "STAGE.eye_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/left/legs": {
            "child_order": [
                "front",
                "back"
            ],
            "enabled": true,
            "attrs": {
                "chain": {
                    "type": "list",
                    "value": "['Section1', 'Section2', 'Section3', 'Section4', 'Section5', 'END']"
                }
            }
        },
        "/left/legs/back": {
            "instance": "/limb",
            "attrs": {
                "prefix": {
                    "type": "raw",
                    "value": "Back_Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "2"
                },
                "socket": {
                    "value": "\"Spine_M_matrixSpline_Segment1_CTL\""
                }
            }
        },
        "/left/legs/front": {
            "instance": "/limb",
            "attrs": {
                "prefix": {
                    "type": "raw",
                    "value": "Front_Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "2"
                },
                "socket": {
                    "type": "str",
                    "value": "\"Spine_M_matrixSpline_Segment2_CTL\""
                }
            }
        },
        "/left/mouth_pincer": {
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.05"
                },
                "ctl_group": {
                    "type": "raw",
                    "value": "${part_name}_CTLS"
                },
                "guides": {
                    "type": "list",
                    "value": "[\"BASE\", \"MID\", \"END\"]"
                },
                "parent": {
                    "type": "raw",
                    "value": "Head_M_END_CTL"
                },
                "part_def": {
                    "type": "raw",
                    "value": "${part_name}_DEF"
                },
                "part_group": {
                    "type": "raw",
                    "value": "${part_name}_MCH"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Maxilla_"
                },
                "segments": {
                    "type": "int",
                    "value": "3"
                },
                "socket": {
                    "type": "raw",
                    "value": "Spine_M_matrixSpline_Segment4_CTL"
                },
                "tweak_attr": {
                    "type": "raw",
                    "value": "${part_name}_ControlPanel.${tweak_attr_long}"
                },
                "tweak_attr_long": {
                    "type": "raw",
                    "value": "tweakVisibility"
                },
                "tweak_attr_nice": {
                    "type": "raw",
                    "value": "Tweak Control Visibility"
                },
                "tweak_group": {
                    "type": "raw",
                    "value": "${part_name}_Tweak_CTLS"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.03"
                }
            },
            "code": [
                "part_group = cmds.group(empty=True, name=\"${part_group}\", parent=\"${parent}\")",
                "def_group = cmds.group(empty=True, name=\"${part_def}\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=part_group)",
                "tweak_group = cmds.group(empty=True, name=\"${tweak_group}\", parent=ctl_group)",
                "cmds.hide(tweak_group)",
                "",
                "cmds.connectAttr(",
                "    \"${control_layer}.controlColor\", ",
                "    f\"{ctl_group}.drawOverride.overrideColorRGB\"",
                ")",
                "cmds.setAttr(f\"{ctl_group}.overrideEnabled\", 1)",
                "cmds.setAttr(f\"{ctl_group}.overrideRGBColors\", 1)",
                "",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=\"${tweak_attr_long}\", ",
                "            niceName=\"${tweak_attr_nice}\", ",
                "            attributeType=\"bool\",",
                "            )",
                "tweak_attr = f\"{control_panel}.${tweak_attr_long}\"",
                "cmds.setAttr(tweak_attr, channelBox=True)   ",
                "",
                "joints = [f\"${prefix}${side}_{joint}\" for joint in self.guides]",
                "self.joints = joints  ",
                "",
                "controls = []",
                "for i, guide in enumerate(joints):",
                "    control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=ctl_group,  ",
                "    )",
                "    controls.append(control.control_transform)",
                "    if i == 0:",
                "        impulse.utils.transform.matrix_constraint(\"${socket}\", control.offset_transform, keep_offset=True)",
                "    else:",
                "        cmds.connectAttr(\"${tweak_attr}\", f\"{control.offset_transform}.visibility\")",
                "        cmds.parent(control.offset_transform, controls[0])",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${part_name}\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "for control in controls:",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_${tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} ${tweak_attr_nice}\", ",
                "        proxy=\"${tweak_attr}\")",
                "        ",
                "STAGE.body_joints.extend(cmds.listRelatives(def_group, type=\"joint\", allDescendents=True))"
            ]
        },
        "/main_window": {
            "child_order": [
                "manual_tab"
            ]
        },
        "/main_window/manual_tab": {
            "child_order": [
                "selection_panel",
                "main_panel",
                "curve"
            ]
        },
        "/main_window/manual_tab/curve": {
            "child_order": [
                "grid",
                "create_control"
            ]
        },
        "/main_window/manual_tab/curve/grid": {
            "child_order": [
                "combine_curve",
                "write_curve",
                "size_selector",
                "control_selector"
            ]
        },
        "/main_window/manual_tab/curve/grid/control_selector": {
            "attrs": {
                "menu_value": {
                    "type": "raw",
                    "value": "Triangle"
                }
            }
        },
        "/main_window/manual_tab/main_panel/grid/set_rotation_order": {},
        "/middle": {
            "instance": "/side",
            "execute_in": "/base",
            "child_order": [
                "cog",
                "spine",
                "shell"
            ],
            "attrs": {
                "cog_guide": {
                    "type": "raw",
                    "value": "COG"
                },
                "control_color": {
                    "type": "list",
                    "value": "[0.149, 0.760, 0.360]"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})"
            ]
        },
        "/middle/cog": {
            "attrs": {
                "size": {
                    "type": "int",
                    "value": "1"
                }
            },
            "code": [
                "controls = []",
                "cog = impulse.utils.control.make_control(",
                "            name=\"${cog_guide}\", ",
                "            size=${size}, ",
                "            target_transform=\"${cog_guide}\",",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=\"${controls_parent}\",",
                ")",
                "controls.append(cog)",
                "",
                "for control in controls:",
                "    control_transform = control.control_transform",
                "    cmds.connectAttr(",
                "                \"${control_layer}.controlColor\", ",
                "                f\"{control_transform}.drawOverride.overrideColorRGB\"",
                "            )",
                "    cmds.setAttr(f\"{control_transform}.overrideEnabled\", 1)",
                "    cmds.setAttr(f\"{control_transform}.overrideRGBColors\", 1)"
            ]
        },
        "/middle/shell": {
            "enabled": true,
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.07"
                },
                "guide_prefix": {
                    "type": "raw",
                    "value": "${part_name}_Squash"
                },
                "guides": {
                    "type": "list",
                    "value": "['${guide_prefix}_BEGIN', '${guide_prefix}_MID', '${guide_prefix}_END']"
                },
                "main_control": {
                    "type": "raw",
                    "value": "${part_name}_Main"
                },
                "main_size": {
                    "type": "float",
                    "value": "0.8"
                },
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "prefix": {
                    "type": "raw",
                    "value": "Shell_"
                },
                "segments": {
                    "type": "int",
                    "value": "3"
                },
                "spline_name": {
                    "type": "raw",
                    "value": "${part_name}_Squash"
                },
                "tweak_size": {
                    "type": "float",
                    "value": "0.8"
                }
            },
            "code": [
                "shell_main = impulse.utils.control.make_control(",
                "            name=\"${main_control}\", ",
                "            target_transform=\"${main_control}\",",
                "            size=${main_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            parent=\"${cog_guide}_CTL\",",
                "            offset=2,",
                ")",
                "",
                "part_group = cmds.group(empty=True, name=\"${spline_name}\", parent=shell_main.control_transform)",
                "def_group = cmds.group(empty=True, name=\"${part_name}_DEF\", parent=\"${def_group}\")",
                "ctl_group = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=part_group)",
                "tweak_group = cmds.group(empty=True, name=\"${part_name}_Tweak_CTLS\", parent=part_group)",
                "",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "tweak_attr_long = \"tweakVisibility\"",
                "tweak_attr_nice = \"Tweak Control Visibility\"",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=tweak_attr_long, ",
                "            niceName=tweak_attr_nice, ",
                "            attributeType=\"bool\",",
                "            )",
                "tweak_attr = f\"{control_panel}.{tweak_attr_long}\"",
                "cmds.setAttr(tweak_attr, channelBox=True)           ",
                "",
                "",
                " ",
                "",
                "",
                "guides = ${guides} ",
                "controls = []",
                "for i, guide in enumerate(guides):",
                "    control = impulse.utils.control.make_control(",
                "            name=guide, ",
                "            size=${control_size}, ",
                "            target_transform=guide,",
                "            control_shape=impulse.utils.control.ControlShape.SPHERE,",
                "            parent=ctl_group,  ",
                "    )",
                "    controls.append(control.control_transform)",
                "    impulse.utils.control.draw_on_top(control)",
                "",
                "impulse.utils.spline.matrix_spline_from_transforms(",
                "    name=\"${spline_name}\",",
                "    transforms=controls, ",
                "    degree=2,",
                "    segments=${segments}, ",
                "    control_size=${tweak_size},",
                "    control_shape=impulse.utils.control.ControlShape.CUBE,",
                "    control_height=0.1,",
                "    parent=part_group,",
                "    spline_group=part_group,",
                "    def_group=def_group,",
                "    ctl_group=tweak_group,",
                ")",
                "",
                "cmds.connectAttr(tweak_attr, f\"{tweak_group}.visibility\") ",
                "",
                "controls.append(shell_main.control_transform)",
                "",
                "for control in controls:",
                "    cmds.addAttr(",
                "        control,",
                "        longName=f\"${part_name}_{tweak_attr_long}\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} {tweak_attr_nice}\", ",
                "        proxy=f\"{control_panel}.{tweak_attr_long}\")",
                "",
                "bend_joints = cmds.listRelatives(def_group, type=\"joint\", allDescendents=True)",
                "        ",
                "shell_main_joint = cmds.duplicate(\"${main_control}\", parentOnly=True, name=\"${main_control}_DEF\")[0]",
                "cmds.parent(shell_main_joint, def_group)",
                "impulse.utils.control.connect_control(shell_main, shell_main_joint)",
                "                        ",
                "STAGE.shell_joints.extend(bend_joints)",
                "STAGE.body_joints.extend(bend_joints)",
                "STAGE.shell_bend_dict[shell_main_joint] = bend_joints"
            ]
        },
        "/middle/spine": {
            "instance": "/spine",
            "enabled": true,
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.5"
                },
                "guides": {
                    "type": "list",
                    "value": "['Body_M_Section1', 'Body_M_Section2' , 'Head_M_END']"
                },
                "tangent_offset": {
                    "type": "float",
                    "value": "0.2"
                },
                "tweak_control_height": {
                    "type": "float",
                    "value": "0.1"
                }
            }
        },
        "/right": {
            "instance": "/left",
            "execute_in": "/left",
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.811, 0.080, 0.108]"
                },
                "side": {
                    "value": "R"
                },
                "side_mult": {
                    "value": "-1"
                }
            }
        },
        "/setup_file": {
            "start_point": true,
            "child_order": [
                "load_geo",
                "load_guides",
                "def_lists",
                "enable_bend_joints"
            ],
            "code": [
                "cmds.file(force=True, newFile=True)",
                "cmds.group(empty=True, name=\"${rig_group}\")"
            ]
        },
        "/setup_file/def_lists": {
            "code": [
                "STAGE.body_joints = []",
                "STAGE.limb_joints = []",
                "STAGE.shell_joints = []",
                "STAGE.eye_joints = []"
            ]
        },
        "/setup_file/enable_bend_joints": {
            "enabled": true,
            "code": [
                "STAGE.bend_dict = {}",
                "STAGE.shell_bend_dict = {}",
                "STAGE.apply_bend_joints = True",
                "STAGE.bend_joints = []"
            ]
        },
        "/setup_file/load_geo": {},
        "/skinning": {
            "execute_in": "/right",
            "child_order": [
                "bind_skin",
                "apply_weights",
                "split_weights"
            ],
            "attrs": {
                "skinning_pairs": {
                    "type": "list",
                    "value": "[(\"shell_joints\", \"Shell_GEO\"), (\"shell_joints\", \"Bandaid_GEO\"), (\"eye_joints\", \"Eyes_GEO\"), (\"body_joints\", \"Body_GEO\")]"
                }
            }
        },
        "/skinning/apply_weights": {
            "code": [
                "import os",
                "skinning_pairs = ${skinning_pairs}",
                "for joint_attr, geo_name in skinning_pairs:",
                "    weights_name = f\"{geo_name.rsplit('_', 1)[0]}\".lower()",
                "    filename = f\"${asset_root}/{weights_name}_weights.json\"",
                "    if os.path.isfile(filename):",
                "        impulse.utils.skin.apply_ng_skin_weights(f\"${asset_root}/{weights_name}_weights.json\", geometry=geo_name)",
                "    else:",
                "        print(f\"Weight file not found: {filename}\")"
            ]
        },
        "/skinning/bind_skin": {
            "attrs": {
                "dual_quaternion": {
                    "type": "bool",
                    "value": "False"
                }
            },
            "code": [
                "skinning_pairs = ${skinning_pairs}",
                "for joint_attr, geo_name in skinning_pairs:",
                "    joints = getattr(STAGE, joint_attr, None)",
                "    if joints is None:",
                "        raise RuntimeError(f\"STAGE does not have an attribute '{joint_attr}'\")",
                "",
                "    if not isinstance(joints, list):",
                "        raise TypeError(f\"{joint_attr} must resolve to a list of joint names, got {type(joints)}\")",
                "",
                "    impulse.utils.skin.skin_mesh(joints, geo_name, dual_quaternion=${dual_quaternion})"
            ]
        },
        "/skinning/split_weights": {
            "enabled": true,
            "code": [
                "import cProfile",
                "import pstats",
                "def profile_function():",
                "    split_dict = getattr(STAGE, \"bend_dict\", {})",
                "    shell_split_dict = getattr(STAGE, \"shell_bend_dict\", {})",
                "    impulse.utils.skin.split_weights(",
                "        mesh=\"Body_GEO\", ",
                "        joint_split_dict=split_dict,",
                "        degree=3,",
                "        add_ng_layer=False,",
                "    )",
                "if STAGE.apply_bend_joints:",
                "    profile_function()",
                "    #profiler = cProfile.Profile()",
                "    #profiler.runcall(profile_function)",
                "    #profiler.dump_stats('profile_output')",
                "    # Read the stats",
                "    #stats = pstats.Stats('profile_output')",
                "    #stats.strip_dirs().sort_stats('cumtime').print_stats(20)",
                "        ",
                ""
            ]
        }
    }
}