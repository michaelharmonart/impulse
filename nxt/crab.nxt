{
    "version": "1.17",
    "alias": "crab",
    "color": "#aa3537",
    "mute": false,
    "solo": false,
    "references": [
        "/users/guest/g/graphite/maya-python/impulse/nxt/setup.nxt"
    ],
    "comp_overrides": {
        "/users/guest/g/graphite/maya-python/impulse/nxt/base.nxt": {
            "solo": false
        },
        "/users/guest/g/graphite/maya-python/impulse/nxt/cleanup.nxt": {
            "mute": false,
            "solo": false
        },
        "/users/guest/g/graphite/maya-python/impulse/nxt/setup.nxt": {
            "solo": false
        }
    },
    "meta_data": {
        "colors": {
            "/users/guest/g/graphite/maya-python/impulse/nxt/cleanup.nxt": "#2371d0",
            "/users/guest/g/graphite/maya-python/impulse/nxt/setup.nxt": "#49936d"
        },
        "positions": {
            "/Cleanup": [
                955.239112846677,
                -414.72823618234577
            ],
            "/Controls": [
                659.5433881056839,
                -415.4740604063512
            ],
            "/Left/Legs/Back": [
                0.0,
                0.0
            ],
            "/Left/Legs/Front": [
                0.0,
                0.0
            ],
            "/Leg2": [
                -7.0,
                -461.0
            ],
            "/Legs": [
                66.2052106852218,
                -438.6958204441296
            ],
            "/cleanup": [
                908.218426214469,
                -417.232392250646
            ],
            "/left": [
                -45.82891207776109,
                -417.85345417265876
            ],
            "/left/legs/front": [
                0.0,
                0.0
            ],
            "/leg": [
                -436.51987547605665,
                -173.18751206791862
            ],
            "/node": [
                -268.77691323339127,
                97.96991207827566
            ],
            "/node2": [
                -1746.0,
                -1015.0
            ],
            "/right": [
                372.23984087980006,
                -420.16197846351787
            ],
            "/setup_file": [
                -452.80689444777397,
                -418.0437099019432
            ]
        },
        "collapse": {
            "/Cleanup": true,
            "/Leg2": true,
            "/SetupFile": false,
            "/SetupFile/node": true,
            "/left": false,
            "/left/legs/back": false,
            "/left/legs/front": false,
            "/leg": false,
            "/right": false,
            "/setup_file/LoadGuides": false
        }
    },
    "nodes": {
        "/": {
            "attrs": {
                "asset_root": {
                    "type": "raw",
                    "value": "${path::/groups/crabby/Assets/Rigging/Scuttle/Build}"
                }
            }
        },
        "/cleanup": {
            "execute_in": "/right",
            "code": [
                "# Hide Rig Groups",
                "cmds.hide(\"${guides_group}\")",
                "cmds.hide(\"${mch_group}\")",
                "",
                "# Make Geo unselectable",
                "cmds.setAttr(\"${geo_group}.overrideEnabled\", 1)",
                "cmds.setAttr(\"${geo_group}.overrideDisplayType\", 2)"
            ]
        },
        "/left": {
            "execute_in": "/setup_file",
            "child_order": [
                "legs"
            ],
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.105, 0.247, 0.411]"
                },
                "control_layer": {
                    "type": "raw",
                    "value": "${side}_ControlLayer"
                },
                "side": {
                    "type": "raw",
                    "value": "L"
                }
            },
            "code": [
                "settings = cmds.createNode(\"network\", name=\"${control_layer}\")",
                "cmds.addAttr(settings, longName='controlColor', usedAsColor=True, attributeType='float3' )",
                "cmds.addAttr(settings, longName='controlColorR', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorG', attributeType='float', parent='controlColor')",
                "cmds.addAttr(settings, longName='controlColorB', attributeType='float', parent='controlColor')",
                "",
                "cmds.setAttr(f\"{settings}.controlColor\", type=\"float3\", *${control_color})",
                "",
                "cmds.refresh()"
            ]
        },
        "/left/legs": {
            "child_order": [
                "front",
                "back"
            ],
            "attrs": {
                "chain": {
                    "type": "list",
                    "value": "['Section1', 'Section2', 'Section3', 'Section4', 'Section5', 'END']"
                }
            }
        },
        "/left/legs/back": {
            "instance": "/leg",
            "attrs": {
                "prefix": {
                    "type": "raw",
                    "value": "Back_Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "3"
                }
            }
        },
        "/left/legs/front": {
            "instance": "/leg",
            "attrs": {
                "prefix": {
                    "type": "raw",
                    "value": "Front_Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "3"
                }
            }
        },
        "/leg": {
            "child_order": [
                "controls"
            ],
            "attrs": {
                "fk_joints": {},
                "ik_chain_joints": {},
                "ik_joints": {},
                "ik_switch": {},
                "joints": {},
                "part_name": {
                    "type": "raw",
                    "value": "${prefix}${side}"
                },
                "pole_vector": {
                    "type": "raw",
                    "value": "${part_name}_PoleVector"
                },
                "pose_joints": {},
                "prefix": {
                    "type": "raw",
                    "value": "Leg_"
                },
                "reverse_segments": {
                    "type": "int",
                    "value": "0"
                },
                "side": {
                    "type": "raw",
                    "value": "L"
                }
            },
            "code": [
                "cmds.group(empty=True, name=\"${part_name}\", parent=\"${mch_group}\")",
                "control_panel: str = cmds.createNode(\"network\", name=\"${part_name}_ControlPanel\")",
                "cmds.addAttr(",
                "            control_panel,",
                "            longName=f\"IkFkSwitch\", ",
                "            niceName=f\"IK FK Switch\", ",
                "            minValue=0,",
                "            maxValue=1,",
                "            attributeType=\"float\",",
                "            )",
                "cmds.setAttr(f\"{control_panel}.IkFkSwitch\", keyable=True)            ",
                "self.ik_switch = f\"{control_panel}.IkFkSwitch\"",
                "self.joints = [f\"${prefix}${side}_{joint}\" for joint in self.chain]",
                "",
                "solve_joints = impulse.utils.ik.ik_from_guides(",
                "    guides=self.joints, pole_vector_guide=\"${pole_vector}\", ",
                "    name=\"${part_name}_IK\", parent=\"${part_name}\", reverse_segments=${reverse_segments}",
                ")",
                "",
                "if ${reverse_segments}:",
                "    ik_chain_joints = impulse.utils.ik.fk_from_guides(guides=self.joints, name=\"${part_name}_IkChain\", parent=\"${part_name}\", suffix=\"_IkChain\")",
                "    impulse.utils.transform.constrain_transforms(solve_joints, ik_chain_joints)",
                "    self.ik_chain_joints = ik_chain_joints",
                "else:",
                "    self.ik_chain_joints = solve_joints",
                "",
                "self.ik_joints = solve_joints    ",
                "self.fk_joints = impulse.utils.ik.fk_from_guides(guides=self.joints, name=\"${part_name}_FK\", parent=\"${part_name}\")",
                "self.pose_joints = impulse.utils.ik.fk_from_guides(guides=self.joints, name=\"${part_name}_POSE\", parent=\"${part_name}\", suffix=\"_POSE\")",
                "",
                "impulse.utils.ik.ik_fk_blend_list(self.ik_chain_joints, self.fk_joints, self.pose_joints, self.ik_switch)",
                "",
                "def_joints = impulse.utils.ik.fk_from_guides(guides=self.joints[:-1], name=\"${part_name}_DEF\", parent=\"${def_group}\", suffix=\"_DEF\")",
                "impulse.utils.transform.constrain_transforms(self.pose_joints[:-1], def_joints)",
                "",
                ""
            ]
        },
        "/leg/controls": {
            "child_order": [
                "fk",
                "ik"
            ],
            "attrs": {
                "control_size": {
                    "type": "float",
                    "value": "0.2"
                },
                "part_ctls": {
                    "type": "raw",
                    "value": "${part_name}_CTLS"
                }
            },
            "code": [
                "self.part_ctls = cmds.group(empty=True, name=\"${part_name}_CTLS\", parent=\"${controls_group}\")"
            ]
        },
        "/leg/controls/fk": {
            "code": [
                "controls = []",
                "fk_group = cmds.group(empty=True, name=\"${part_name}_FK_CTLS\", parent=\"${part_ctls}\")",
                "cmds.connectAttr(\"${ik_switch}\", f\"{fk_group}.visibility\")",
                "for index, joint in enumerate(self.fk_joints):",
                "    # Check if the joint has a child and if so, generate a control",
                "    joint_children = cmds.listRelatives(joint, children=True, type=\"joint\") or []",
                "    if len(joint_children) > 0:",
                "        joint_child = joint_children[0]",
                "        y_translate = cmds.getAttr(f\"{joint_child}.translateY\")",
                "    ",
                "        control = impulse.utils.control.make_control(",
                "            name=joint, ",
                "            target_transform=joint, ",
                "            size=${control_size}, ",
                "            control_shape=impulse.utils.control.ControlShape.CIRCLE,",
                "            offset=y_translate/2,",
                "            )",
                "        controls.append(control)",
                "        ",
                "        # Parent to the control group, or the parent control.",
                "        if index > 0:",
                "            cmds.parent(control.offset_transform, controls[index - 1].control_transform)",
                "        else:",
                "            cmds.parent(control.offset_transform, fk_group)",
                "        ",
                "         # Set up control colors    ",
                "        control_transform = control.control_transform",
                "        impulse.utils.control.connect_control(control, joint)",
                "        cmds.connectAttr(",
                "            \"${control_layer}.controlColor\", ",
                "            f\"{control_transform}.drawOverride.overrideColorRGB\"",
                "        )",
                "        cmds.setAttr(f\"{control_transform}.overrideEnabled\", 1)",
                "        cmds.setAttr(f\"{control_transform}.overrideRGBColors\", 1)",
                "        ",
                "        ",
                "        cmds.addAttr(",
                "            control_transform,",
                "            longName=\"${part_name}_IkFkSwitch\", ",
                "            niceName=f\"{self.part_name.replace('_', ' ')} IK FK Switch\", ",
                "            proxy=\"${ik_switch}\")"
            ]
        },
        "/leg/controls/ik": {
            "attrs": {
                "pole_vector_size": {
                    "type": "float",
                    "value": "0.05"
                }
            },
            "code": [
                "controls = []",
                "ik_group = cmds.group(empty=True, name=\"${part_name}_IK_CTLS\", parent=\"${part_ctls}\")",
                "ik_joints = self.ik_joints",
                "ik_switch_reverse = cmds.createNode(\"subtract\")",
                "cmds.setAttr(\"subtract1.input1\", 1)",
                "cmds.connectAttr(\"${ik_switch}\", f\"{ik_switch_reverse}.input2\")",
                "cmds.connectAttr(f\"{ik_switch_reverse}.output\", f\"{ik_group}.visibility\")",
                "",
                "reversed_joints = ik_joints[::-1]",
                "control_joints = [ik_joints[0]]+reversed_joints[:${reverse_segments}]",
                "pole_vector_parent: str",
                "for index, joint in enumerate(control_joints):",
                "    if index == 1:",
                "        control_shape=impulse.utils.control.ControlShape.CUBE",
                "    else:",
                "        control_shape=impulse.utils.control.ControlShape.CIRCLE",
                "        ",
                "    control = impulse.utils.control.make_control(",
                "        name=joint, ",
                "        target_transform=joint, ",
                "        size=${control_size}, ",
                "        control_shape=control_shape,",
                "        offset=0,",
                "        )",
                "    controls.append(control)",
                "        ",
                "    # Parent to the control group, or the parent control.",
                "    if index > 1:",
                "        cmds.parent(control.offset_transform, controls[index - 1].control_transform)",
                "    else:",
                "        cmds.parent(control.offset_transform, ik_group)",
                "    if index == ${reverse_segments}:",
                "        pole_vector_parent = control.control_transform",
                "    control_transform = control.control_transform",
                "    impulse.utils.control.connect_control(control, joint)",
                "",
                "pv_control = impulse.utils.control.make_control(",
                "    name=\"${pole_vector}\", ",
                "    target_transform=\"${pole_vector}\", ",
                "    size=${pole_vector_size}, ",
                "    control_shape=impulse.utils.control.ControlShape.SPHERE,",
                "    offset=0,",
                "    )    ",
                "cmds.parent(pv_control.offset_transform, pole_vector_parent)",
                "impulse.utils.control.connect_control(pv_control, \"${pole_vector}_IN\")            ",
                "for control in controls: ",
                "    control_transform = control.control_transform       ",
                "    # Set up control colors    ",
                "    cmds.connectAttr(",
                "        \"${control_layer}.controlColor\", ",
                "        f\"{control_transform}.drawOverride.overrideColorRGB\"",
                "    )",
                "    cmds.setAttr(f\"{control_transform}.overrideEnabled\", 1)",
                "    cmds.setAttr(f\"{control_transform}.overrideRGBColors\", 1)",
                "    ",
                "    ",
                "    cmds.addAttr(",
                "        control_transform,",
                "        longName=\"${part_name}_IkFkSwitch\", ",
                "        niceName=f\"{self.part_name.replace('_', ' ')} IK FK Switch\", ",
                "        proxy=\"${ik_switch}\")"
            ]
        },
        "/right": {
            "instance": "/left",
            "execute_in": "/left",
            "attrs": {
                "control_color": {
                    "type": "list",
                    "value": "[0.411, 0.080, 0.108]"
                },
                "side": {
                    "value": "R"
                }
            }
        },
        "/setup_file": {
            "start_point": true,
            "attrs": {
                "asset_root": {
                    "value": "/groups/crabby/Assets/Rigging/Scuttle/Build"
                }
            }
        }
    }
}